# Deployment configuration
apps:
  api01:
    enabled: true
    replicaCount: 1
    image:
      repository: wmadiano/demojwt
      tag: latest
      pullPolicy: Always
    containerPort: 3000
    app:
      name: api01
    env:
      - name: DATABASE_URL
        value: "jdbc:mysql://example.com:3306/mydb"
      - name: SECRET_KEY
        value: "secretvalue"
  proto1fe:
    enabled: true
    replicaCount: 1
    image:
      repository: wmadiano/reactjsweb02-demo
      tag: latest
      pullPolicy: Always
    containerPort: 80
    app:
      name: proto1-fe
    env:
      - name: REACT_APP_API_BASE_URL
        value: "http://api01-service.default.svc.cluster.local"
  reactjsdemo1:
    enabled: false
    replicaCount: 1
    image:
      repository: wmadiano/reactjsdemo1
      tag: latest
      pullPolicy: Always
    containerPort: 80
    app:
      name: reactjsdemo1
    env:
      - name: REACT_APP_API_BASE_URL
        value: "http://api01-service.default.svc.cluster.local"
  api02:
    enabled: true
    replicaCount: 1
    image:
      repository: wmadiano/demo02
      tag: latest
      pullPolicy: Always
    containerPort: 3000
    app:
      name: api02
    env:
      - name: DB_NAME
        value: "gl1"
      - name: DB_USER
        value: "postgres"
      - name: DB_PASSWORD
        value: "root"
      - name: DB_DIALECT
        value: "postgres"
      - name: DB_HOST
        value: "postgres-service"
      - name: DB_TIMEZONE
        value: "+08:00"
      - name: PORT
        value: "3000"


# Service configuration
services:
  api01:
    enabled: true
    name: api01-service
    namespace: default
    app: api01
    type: ClusterIP
    port: 80
    targetPort: 3000
    protocol: TCP
  proto1fe:
    namespace: default
    enabled: true
    name: proto1-fe-service
    app: proto1-fe
    type: ClusterIP
    port: 80
    targetPort: 80
    protocol: TCP
  reactjsdemo1:
    namespace: default
    enabled: false
    name: reactjsdemo1-service
    app: reactjsdemo1
    type: ClusterIP
    port: 80
    targetPort: 80
    protocol: TCP
  api02:
    enabled: true
    name: api02-service
    namespace: default
    app: api02
    type: ClusterIP
    port: 80
    targetPort: 3000
    protocol: TCP


# Ingress configuration
ingress:
  enabled: true
  name: my-service-ingress
  className: "" # Specify if needed
  hosts:
    - host: api.gresdev.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: api01-service
            port: 80
    - host: web.gresdev.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: proto1-fe-service
            port: 80
    - host: api2.gresdev.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: api02-service
            port: 80
    # - host: db.gresdev.com
    #   paths:
    #     - path: /
    #       pathType: Prefix
    #       service:
    #         name: postgres-service
    #         port: 5432
